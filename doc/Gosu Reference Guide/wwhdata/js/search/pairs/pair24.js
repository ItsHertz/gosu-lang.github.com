function FileData_Pairs(x)
{
x.t("statements","no");
x.t("statements","flow");
x.t("upgrade","impact");
x.t("example","type");
x.t("example","(1..10)");
x.t("example","write");
x.t("example","following");
x.t("supports","annotations");
x.t("possible","code");
x.t("else","however");
x.t("else","branch");
x.t("construct","_name");
x.t("construct","boolean");
x.t("construct","//");
x.t("method","type");
x.t("parameter","argument");
x.t("parameter","annotations");
x.t("enforce","programmatic");
x.t("version","8.0");
x.t("annotation","class");
x.t("subclasses","release");
x.t("_name","however");
x.t("_name","no");
x.t("_name","string");
x.t("_name","hello");
x.t("currently","no");
x.t("community","release");
x.t("10","gosu");
x.t("10","release");
x.t("once","declared");
x.t("once","words");
x.t("once","code");
x.t("once","following");
x.t("variables","previous");
x.t("variables","class");
x.t("flag","jvm");
x.t("declared","class");
x.t("uses","lines");
x.t("text_val.select","link");
x.t("statement","example");
x.t("statement","new");
x.t("statement","no");
x.t("statement","declares");
x.t("statement","confirm");
x.t("statement","types");
x.t("statement","previous");
x.t("statement","semantics");
x.t("support","annotations");
x.t("assert","statements");
x.t("assert","statement");
x.t("change","support");
x.t("change","loop");
x.t("change","new");
x.t("change","final");
x.t("change","may");
x.t("type","complete");
x.t("type","iterate");
x.t("type","class");
x.t("type","var");
x.t("testabc","final");
x.t("compiler","verifies");
x.t("explicitly","add");
x.t("time","apis");
x.t("time","no");
x.t("what\u2019s","new");
x.t("releases","loop");
x.t("releases","new");
x.t("releases","gosu");
x.t("releases","final");
x.t("however","type");
x.t("however","remove");
x.t("however","constructor");
x.t("however","following");
x.t("default","assert");
x.t("uninitialized","false");
x.t("apis","gosu");
x.t("apis","changing");
x.t("new","assert");
x.t("new","gosu");
x.t("new","changed");
x.t("new","string");
x.t("new","may");
x.t("new","option");
x.t("new","optionally");
x.t("new","operator");
x.t("new","object");
x.t("link","directly");
x.t("contract","gosu");
x.t("details","assert");
x.t("loop","declarations");
x.t("loop","may");
x.t("8.0","type");
x.t("branch","invalid");
x.t("access","function");
x.t("block","declarations");
x.t("messsage","gosu");
x.t("initialization","exactly");
x.t("initialization","separate");
x.t("continues","supported");
x.t("need","explicitly");
x.t("add","uses");
x.t("add","-ea");
x.t("complete","statement");
x.t("guide","what\u2019s");
x.t("remove","else");
x.t("initialized","true");
x.t("saves","copy");
x.t("(1..10)","print");
x.t("false","(a)");
x.t("reflection","apis");
x.t("directly","page");
x.t("declare","annotation");
x.t("declare","local");
x.t("declare","variable");
x.t("true","function");
x.t("text_val.focus","text_val.select");
x.t("no","upgrade");
x.t("no","compile");
x.t("no","effect");
x.t("jvm","hosts");
x.t("path","class");
x.t("gosu","community");
x.t("gosu","assert");
x.t("gosu","compiler");
x.t("gosu","block");
x.t("gosu","supported");
x.t("gosu","language");
x.t("gosu","reference");
x.t("gosu","enable");
x.t("gosu","interval");
x.t("gosu","class");
x.t("gosu","0.10.2-c");
x.t("changed","gosu");
x.t("iterate","across");
x.t("initialize","possible");
x.t("initialize","once");
x.t("initialize","final");
x.t("initialize","code");
x.t("initialize","variable");
x.t("initialize","value");
x.t("exactly","once");
x.t("(a)","else");
x.t("(a)","no");
x.t("constructor","initialize");
x.t("constructor","object");
x.t("expectations","enforce");
x.t("declares","variable");
x.t("initializing","variable");
x.t("annotating","class");
x.t("argument","currently");
x.t("argument","annotations");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("boolean","_name");
x.t("boolean","final");
x.t("useful","however");
x.t("parameters","gosu");
x.t("parameters","including");
x.t("declarations","declare");
x.t("declarations","local");
x.t("declarations","cases");
x.t("omit","variable");
x.t("verifies","code");
x.t("confirm","expectations");
x.t("1..10","print");
x.t("final","local");
x.t("final","keyword");
x.t("final","variable");
x.t("final","immediately");
x.t("final","using");
x.t("final","class");
x.t("final","var");
x.t("ide","behavior");
x.t("local","variable");
x.t("int","10");
x.t("int","(a)");
x.t("int","//");
x.t("write","something");
x.t("string","construct");
x.t("string","however");
x.t("string","new");
x.t("string","//");
x.t("lines","declare");
x.t("flow","control");
x.t("structures","variable");
x.t("error","occurred");
x.t("body","loop");
x.t("supported","new");
x.t("supported","declaring");
x.t("something","function");
x.t("syntax","continues");
x.t("syntax","final");
x.t("syntax","java");
x.t("syntax","valid");
x.t("-ea","flag");
x.t("concise","code");
x.t("guidewire_selectall","var");
x.t("control","structures");
x.t("constructors","initialize");
x.t("function","possible");
x.t("function","parameter");
x.t("function","parameters");
x.t("function","guidewire_selectall");
x.t("function","foo");
x.t("annotations","access");
x.t("annotations","function");
x.t("annotations","run");
x.t("annotations","using");
x.t("may","useful");
x.t("may","variable");
x.t("may","permit");
x.t("may","unnecessary");
x.t("words","statements");
x.t("language","supports");
x.t("release","what\u2019s");
x.t("release","final");
x.t("release","previous");
x.t("declaring","local");
x.t("keyword","used");
x.t("types","may");
x.t("compile","time");
x.t("programmatic","contract");
x.t("impact","change");
x.t("reference","guide");
x.t("enable","assertions");
x.t("code","uninitialized");
x.t("code","saves");
x.t("code","path");
x.t("code","constructors");
x.t("code","correct");
x.t("code","cases");
x.t("code","paths");
x.t("invalid","constructor");
x.t("invalid","final");
x.t("invalid","code");
x.t("return","value");
x.t("previous","releases");
x.t("previous","syntax");
x.t("option","declare");
x.t("java","default");
x.t("java","reflection");
x.t("variable","construct");
x.t("variable","once");
x.t("variable","initialization");
x.t("variable","initialized");
x.t("variable","argument");
x.t("variable","1..10");
x.t("variable","final");
x.t("variable","declaration");
x.t("variable","optional");
x.t("variable","immediately");
x.t("variable","class");
x.t("occurred","messsage");
x.t("changing","ide");
x.t("hosts","application");
x.t("interval","optionally");
x.t("value","statement");
x.t("value","new");
x.t("value","value");
x.t("value","eventually");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("declaration","previous");
x.t("declaration","without");
x.t("declaration","including");
x.t("triggers","code");
x.t("hello","construct");
x.t("hello","version");
x.t("hello","no");
x.t("word","example");
x.t("foo","boolean");
x.t("foo","final");
x.t("valid","constructors");
x.t("expression","statement");
x.t("page","error");
x.t("separate","declaration");
x.t("optional","previous");
x.t("correct","function");
x.t("semantics","syntax");
x.t("application","details");
x.t("print","hello");
x.t("print","cases");
x.t("eventually","function");
x.t("permit","concise");
x.t("cases","new");
x.t("cases","need");
x.t("cases","body");
x.t("optionally","statement");
x.t("optionally","omit");
x.t("copy","new");
x.t("based","annotations");
x.t("immediately","initialize");
x.t("immediately","initializing");
x.t("following","syntax");
x.t("following","code");
x.t("following","invalid");
x.t("used","class");
x.t("run","time");
x.t("class","method");
x.t("class","subclasses");
x.t("class","variables");
x.t("class","testabc");
x.t("class","annotating");
x.t("class","constructors");
x.t("class","function");
x.t("class","variable");
x.t("using","syntax");
x.t("using","java");
x.t("setting","value");
x.t("//","initialize");
x.t("//","invalid");
x.t("across","gosu");
x.t("paths","example");
x.t("paths","construct");
x.t("paths","initialization");
x.t("without","immediately");
x.t("operator","statement");
x.t("operator","expression");
x.t("operator","optionally");
x.t("unnecessary","change");
x.t("behavior","based");
x.t("var","_name");
x.t("var","new");
x.t("var","text_val=eval");
x.t("var","int");
x.t("var","setting");
x.t("effect","gosu");
x.t("including","gosu");
x.t("including","word");
x.t("0.10.2-c","what\u2019s");
x.t("0.10.2-c","new");
x.t("0.10.2-c","function");
x.t("assertions","add");
x.t("object","return");
x.t("object","triggers");
}
