function  WWHBookData_AddTOCEntries(P)
{
var A=P.fN("About This Document","1");
var B=A.fN("Downloads, Technical Questions, and Submitting Feedback","1#1334393");
B=A.fN("Conventions in This Document","1#1338555");
A=P.fN("Gosu Introduction","2");
B=A.fN("Welcome to Gosu","3");
var C=B.fN("Control Flow","3#1437383");
C=B.fN("Blocks","3#1469415");
C=B.fN("Enhancements","3#1435182");
C=B.fN("Collections","3#1441186");
C=B.fN("Access to Java Types","3#1435102");
C=B.fN("Gosu Classes and Properties","3#1440296");
C=B.fN("Interfaces","3#1450798");
C=B.fN("List and Array Expansion Operator *.","3#1450589");
C=B.fN("Comparisons","3#1452648");
C=B.fN("Case Sensitivity","3#1450590");
C=B.fN("Compound Assignment Statements","3#1454915");
C=B.fN("Delegating Interface Implementation with Composition","3#1457296");
C=B.fN("Concurrency","3#1456854");
C=B.fN("Exceptions","3#1457070");
C=B.fN("Annotations","3#1458452");
C=B.fN("Gosu Templates","3#1457886");
C=B.fN("XML and XSD Support","3#1460816");
C=B.fN("Web Service Support (Consuming WSDL)","3#1460937");
C=B.fN("Gosu Character Set","3#1484203");
B=A.fN("Running Gosu Programs and Calling Other Classes","4");
B=A.fN("More About the Gosu Type System","5");
C=B.fN("Compile Time Error Prevention","6");
C=B.fN("Type Inference","7");
C=B.fN("Intelligent Code Completion and Other Gosu Editor Tools","8");
C=B.fN("Null Safety for Properties and Other Operators","9");
C=B.fN("Generics in Gosu","10");
C=B.fN("Gosu Primitives Types","11");
B=A.fN("Gosu Case Sensitivity and Capitalization","12");
B=A.fN("Gosu Statement Terminators","13");
B=A.fN("Gosu Comments","14");
B=A.fN("Gosu Reserved Words","15");
B=A.fN("Notable Differences Between Gosu and Java","16");
B=A.fN("Get Ready for Gosu","17");
A=P.fN("Getting Started with Gosu Community Release","18");
B=A.fN("System Requirements","18#1455061");
B=A.fN("Getting Started With IntelliJ IDEA Gosu Plugin","19");
C=B.fN("Install the IntelliJ Gosu Plugin","19#1499941");
C=B.fN("Create a New Gosu Project with the IntelliJ IDEA Gosu plugin","19#1520477");
C=B.fN("Do Not Depend Directly on Gosu JARs","19#1505311");
C=B.fN("The Gosu Scratchpad","19#1520482");
C=B.fN("Keep Only One Project Open at a Time","19#1520486");
B=A.fN("Getting Started With Gosu Command Line Tools","20");
C=B.fN("Advanced Gosu Command Line Tool Usage","20#1496914");
B=A.fN("Using XML and SOAP Libraries with Gosu Community Release","21");
B=A.fN("Advanced Examples","22");
C=B.fN("Servlet Example","22#1506167");
A=P.fN("What\u2019s New and Changed in Gosu Community Release","23");
B=A.fN("What\u2019s New in Gosu 0.10.2-C","24");
C=B.fN("New Assert Statement","24#1531434");
C=B.fN("In For Loop Declarations, Local Variable is Now Optional","24#1531442");
C=B.fN("Final Local Variable and Class Variable Initialization Separate from Declaration","24#1531450");
C=B.fN("The new Operator is Now Optionally a Statement","24#1531502");
C=B.fN("Support Annotations on Function Parameters","24#1531512");
B=A.fN("Changed in Gosu 0.10.2-C","25");
C=B.fN("Gosu Map Enhancement Method Changes","25#1532056");
A=P.fN("Gosu Command Line Shell","26");
B=A.fN("Gosu Command Line Tool Basics","27");
C=B.fN("Command Line Tool Options","27#2182333");
C=B.fN("Writing a Simple Gosu Command Line Program","27#2208954");
B=A.fN("Command Line Arguments","28");
B=A.fN("Gosu Interactive Shell","29");
B=A.fN("Helpful APIs for Command Line Gosu Programs","30");
A=P.fN("Gosu Programs","31");
B=A.fN("The Structure of a Gosu Program","32");
C=B.fN("Metaline as First Line","32#2209342");
C=B.fN("Functions in a Gosu Program","32#2209347");
C=B.fN("Setting the Class Path to Call Other Gosu or Java Classes","32#2209362");
C=B.fN("Advanced Remote Maven-style Configuration of Dependencies (Command Line Only)","32#2215982");
A=P.fN("Types","33");
B=A.fN("Access to Java Types","34");
B=A.fN("Primitive Types","35");
B=A.fN("Objects","36");
C=B.fN("Object Instantiation","36#1538265");
C=B.fN("Object Property Assignment","36#1538294");
C=B.fN("Object Property Access","36#1538306");
C=B.fN("Object Methods","36#1551631");
B=A.fN("Boolean Values","37");
B=A.fN("Sequences of Characters","38");
B=A.fN("Array Types","39");
C=B.fN("List Access Using Array Index Notation","39#1535845");
C=B.fN("Array Expansion","39#1535889");
C=B.fN("Associative Array Syntax for Property Access","39#1535394");
C=B.fN("Legacy Array Type","39#1537144");
B=A.fN("Numeric Literals","40");
B=A.fN("Compatibility with Earlier Gosu Releases","41");
C=B.fN("DateTime","41#1540293");
C=B.fN("Number","41#1541065");
C=B.fN("Array","41#1490826");
A=P.fN("Gosu Operators and Expressions","42");
B=A.fN("Gosu Operators","43");
C=B.fN("Operator Precedence","44");
B=A.fN("Standard Gosu Expressions","45");
B=A.fN("Arithmetic Expressions","46");
B=A.fN("Equality Expressions","47");
B=A.fN("Evaluation Expressions","48");
B=A.fN("Existence Testing Expressions","49");
B=A.fN("Logical Expressions","50");
B=A.fN("New Object Expressions","51");
B=A.fN("Relational Expressions","52");
B=A.fN("Unary Expressions","53");
B=A.fN("Importing Types and Package Namespaces","54");
B=A.fN("Conditional Ternary Expressions","55");
B=A.fN("Special Gosu Expressions","56");
C=B.fN("Function Calls","57");
C=B.fN("Static Method Calls","58");
C=B.fN("Static Property Paths","59");
B=A.fN("Handling Null Values In Expressions","60");
C=B.fN("Null-safe Property Access","60#1655840");
C=B.fN("Null-safe Default Operator","60#1606622");
C=B.fN("Null-safe Indexing for Arrays, Lists, and Maps","60#1598052");
C=B.fN("Null-safe Math Operators","60#1597472");
A=P.fN("Statements","61");
B=A.fN("Gosu Statements","62");
C=B.fN("Statement Lists","62#1440698");
C=B.fN("New Is Optionally a Statement","62#1503805");
B=A.fN("Gosu Variables","63");
C=B.fN("Variable Type Declaration","63#1141530");
C=B.fN("Variable Assignment","63#1453654");
B=A.fN("Gosu Conditional Execution and Looping","64");
C=B.fN("If - Else Statements","64#1142199");
C=B.fN("For Statements","64#1456475");
C=B.fN("While() Statements","64#1141335");
C=B.fN("Do\u2026While() Statements","64#1137579");
C=B.fN("Switch() Statements","64#1137580");
B=A.fN("Gosu Functions","65");
C=B.fN("Named Arguments and Argument Defaults","65#1483902");
C=B.fN("Public and Private Functions","65#1483028");
A=P.fN("Intervals","66");
B=A.fN("What are Intervals?","67");
C=B.fN("Reversing Interval Order","67#1456056");
C=B.fN("Granularity (Step and Unit)","67#1456531");
B=A.fN("Writing Your Own Interval Type","68");
C=B.fN("Custom Iterable Intervals Using Sequenceable Items","68#1461393");
C=B.fN("Custom Iterable Intervals Using Manually-written Iterators","68#1462661");
C=B.fN("Custom Non-iterable Interval Types","68#1461152");
A=P.fN("Exception Handling","69");
B=A.fN("Try-Catch-Finally Constructions","70");
B=A.fN("Throw Statements","71");
B=A.fN("Catching Exceptions in Gosu","72");
B=A.fN("Object Lifecycle Management (\u2018using\u2019 Clauses)","73");
C=B.fN("Disposable Objects","73#1466707");
C=B.fN("Closeable Objects and \u2018using\u2019 Clauses","73#1466986");
C=B.fN("Reentrant Objects and \u2018using\u2019 Clauses","73#1457358");
C=B.fN("Returning Values from \u2018using\u2019 Clauses","73#1469250");
B=A.fN("Assert Statements","74");
A=P.fN("Classes","75");
B=A.fN("What Are Classes?","76");
B=A.fN("Creating and Instantiating Classes","77");
C=B.fN("Creating a New Instance of a Class","77#2449212");
C=B.fN("Naming Conventions for Packages and Classes","77#2447745");
B=A.fN("Properties","78");
C=B.fN("Properties Act Like Data But They Are Dynamic and Virtual Functions","78#2477145");
C=B.fN("Property Paths are Null Tolerant","78#2465283");
C=B.fN("Static Properties","78#2449277");
C=B.fN("More Property Examples","78#2447851");
B=A.fN("Modifiers","79");
C=B.fN("Access Modifiers","79#2445688");
C=B.fN("Override Modifier","79#2449862");
C=B.fN("Abstract Modifier","79#2449868");
C=B.fN("Final Modifier","79#2449875");
C=B.fN("Static Modifier","79#2446412");
B=A.fN("Inner Classes","80");
C=B.fN("Named Inner Classes","80#2450636");
C=B.fN("Anonymous Inner Classes","80#2450064");
A=P.fN("Enumerations","81");
B=A.fN("Using Enumerations","82");
C=B.fN("Extracting Information from Enumerations","82#1459344");
C=B.fN("Comparing Enumerations","82#1459295");
A=P.fN("Interfaces","83");
B=A.fN("What is an Interface?","84");
B=A.fN("Defining and Using an Interface","85");
C=B.fN("Defining and Using Properties with Interfaces","85#1457203");
C=B.fN("Modifiers and Interfaces","85#1459141");
A=P.fN("Composition","86");
B=A.fN("Using Gosu Composition","87");
C=B.fN("Overriding Methods Independent of the Delegate Class","87#2201000");
C=B.fN("Declaring Delegate Implementation Type in the Variable Definition","87#2198236");
C=B.fN("Using One Delegate for Multiple Interfaces","87#2198240");
C=B.fN("Using Composition With Built-in Interfaces","87#2198246");
A=P.fN("Annotations","88");
B=A.fN("Annotating a Class, Method, Type, Class Variable, or Argument","89");
C=B.fN("Built-in Annotations","89#1471842");
B=A.fN("Annotations at Run Time","90");
C=B.fN("Gosu Class Function Parameter Argument Annotations at Run Time","90#1491415");
B=A.fN("Defining Your Own Annotations","91");
C=B.fN("Customizing Annotation Usage","91#1434674");
A=P.fN("Enhancements","92");
B=A.fN("Using Enhancements","93");
C=B.fN("Syntax for Using Enhancements","93#1439437");
C=B.fN("Creating a New Enhancement","93#1439200");
C=B.fN("Syntax for Defining Enhancements","93#1439430");
C=B.fN("Enhancement Naming and Package Conventions","93#1437458");
C=B.fN("Enhancements on Arrays","93#1438604");
A=P.fN("Gosu Blocks","94");
B=A.fN("What Are Blocks?","95");
B=A.fN("Basic Block Definition and Invocation","96");
B=A.fN("Variable Scope and Capturing Variables In Blocks","97");
B=A.fN("Argument Type Inference Shortcut In Certain Cases","98");
B=A.fN("Block Type Literals","99");
B=A.fN("Blocks and Collections","100");
B=A.fN("Blocks as Shortcuts for Anonymous Classes","101");
A=P.fN("Gosu Generics","102");
B=A.fN("Gosu Generics Overview","103");
B=A.fN("Using Gosu Generics","104");
C=B.fN("Parameterized Classes","104#1454721");
C=B.fN("Parameterized Methods","104#1454736");
B=A.fN("Other Unbounded Generics Wildcards","105");
B=A.fN("Generics and Blocks","106");
B=A.fN("How Generics Help Define Collection APIs","107");
B=A.fN("Multiple Dimensionality Generics","108");
B=A.fN("Generics With Custom \u2018Containers\u2019","109");
C=B.fN("Generics with Non-Containers","109#1446525");
A=P.fN("Collections","110");
B=A.fN("Basic Lists","111");
C=B.fN("Creating a List","111#1451974");
C=B.fN("Type Inference and List Initialization","111#1452009");
C=B.fN("Getting and Setting List Values","111#1467078");
C=B.fN("Special Behavior of List Interface in Gosu","111#1466017");
B=A.fN("Basic Hash Maps","112");
C=B.fN("Creating a Hash Map","112#1452165");
C=B.fN("Getting and Setting Values in a Hash Map","112#1452408");
C=B.fN("Creating a Hash Map with Type Inference","112#1452539");
C=B.fN("Special Enhancements on Maps","112#1452216");
C=B.fN("Wrapped Maps with Default Values","112#1501650");
B=A.fN("List and Array Expansion (*.)","113");
C=B.fN("Array Flattening to Single Dimensional Array","113#1466345");
B=A.fN("Enhancement Reference for Collections and Related Types","114");
C=B.fN("Collections Enhancement Methods","115");
C=B.fN("Finding Data in Collections","115#1462591");
C=B.fN("Sorting Collections","115#1444564");
C=B.fN("Mapping Data in Collections","115#1442277");
C=B.fN("Iterating Across Collections","115#1442285");
C=B.fN("Partitioning Collections","115#1442296");
C=B.fN("Converting Lists, Arrays, and Sets","115#1449882");
C=B.fN("Flat Mapping a Series of Collections or Arrays","115#1450050");
C=B.fN("Sizes and Length of Collections and Strings are Equivalent","115#1443101");
A=P.fN("Gosu and XML","116");
B=A.fN("Manipulating XML Overview","117");
B=A.fN("Introduction to the XML Element in Gosu","118");
C=B.fN("Dollar Sign Prefix for Properties that Are XSD Types","119");
B=A.fN("Exporting XML Data","120");
C=B.fN("Export-related Methods on an XML Element","120#1866472");
C=B.fN("XML Serialization Options Reference and Examples","120#1911570");
B=A.fN("Parsing XML Data into an XML Element","121");
B=A.fN("Creating Many Qualified Names in the Same Namespace","122");
B=A.fN("XSD-based Properties and Types","123");
C=B.fN("Important Concepts in XSD Properties and Types","123#1651042");
C=B.fN("XSD Generated Type Examples","123#1673249");
C=B.fN("Automatic Insertion into Lists","123#1673851");
C=B.fN("XSD List Property Example","123#1610237");
B=A.fN("Getting Data From an XML Element","124");
C=B.fN("Manipulating Elements and Values (Works With or Without XSD)","124#1538638");
C=B.fN("Attributes","124#1520181");
B=A.fN("Simple Values","125");
C=B.fN("Methods to Create XML Simple Values","125#1622820");
C=B.fN("XSD to Gosu Simple Type Mappings","125#1622952");
C=B.fN("Facet Validation","125#1623085");
B=A.fN("Access the Nillness of an Element","126");
B=A.fN("Automatic Creation of Intermediary Elements","127");
B=A.fN("Default and Fixed Attribute Values","128");
B=A.fN("Substitution Group Hierarchies","129");
B=A.fN("Element Sorting for XSD-based Elements","130");
B=A.fN("Built-in Schemas","131");
C=B.fN("The XSD that Defines an XSD (The Metaschema)","131#1541995");
B=A.fN("Schema Access Type","132");
C=B.fN("XML Serialization Performance and Element Sorting","132#1931305");
A=P.fN("Calling WS-I Web Services from Gosu","133");
B=A.fN("Consuming WS-I Web Service Overview","133#2001852");
C=B.fN("Loading WS-I WSDL Directly into the File System","133#2064509");
C=B.fN("How Does Gosu Process WSDL?","133#2013784");
C=B.fN("Learning Gosu XML APIs","133#2047933");
C=B.fN("What Gosu Creates from Your WSDL","133#2043632");
C=B.fN("A Real Example: Weather","133#2047856");
C=B.fN("Request XML Complexity Affects Appearance of Method Arguments","133#2069072");
B=A.fN("Adding WS-I Configuration Options","134");
C=B.fN("HTTP Authentication","134#2064831");
C=B.fN("Setting a Timeout","134#2093406");
C=B.fN("Custom SOAP Headers","134#2052743");
C=B.fN("Server Override URL","134#2056586");
C=B.fN("Setting XML Serialization Options","134#2091456");
C=B.fN("Implementing Advanced Web Service Security with WSS4J","134#2052910");
B=A.fN("One-Way Methods","135");
B=A.fN("Asynchronous Methods","136");
B=A.fN("MTOM Attachments","137");
A=P.fN("Calling Java from Gosu","138");
B=A.fN("Overview of Writing Gosu Code that Calls Java","139");
C=B.fN("Many Java Classes are Core Classes for Gosu","139#2134273");
C=B.fN("Java Packages in Scope","139#2131311");
C=B.fN("Static Members and Static Import in Gosu","139#2047802");
C=B.fN("Java Get and Set Methods Convert to Gosu Properties","139#2021794");
C=B.fN("Interfaces","139#2020668");
C=B.fN("Enumerations","139#2020577");
C=B.fN("Annotations","139#2047848");
C=B.fN("Java Primitives","139#2047899");
C=B.fN("Java Generics","139#2135372");
B=A.fN("Deploying Your Java for Command Line Use","140");
C=B.fN("Tutorial - Custom Gosu That Calls Custom Java","140#2136556");
A=P.fN("Gosu Templates","141");
B=A.fN("Template Overview","142");
C=B.fN("Template Expressions","142#1464080");
C=B.fN("When to Escape Special Characters for Templates","143");
B=A.fN("Using Template Files","144");
C=B.fN("Creating and Running a Template File","144#1464601");
C=B.fN("Template Scriptlet Tags","144#1461443");
C=B.fN("Template Parameters","144#1463866");
C=B.fN("Extending a Template From a Class","144#1455745");
C=B.fN("Template Comments","144#1463274");
B=A.fN("Template Export Formats","144#1465221");
A=P.fN("Type System","145");
B=A.fN("The Type of All Types","146");
B=A.fN("Basic Type Coercion","146#1444327");
B=A.fN("Basic Type Checking","147");
C=B.fN("Automatic Downcasting for \u2018typeis\u2019 and \u2018typeof\u2019","147#1455253");
B=A.fN("Using Reflection","148");
C=B.fN("Type Object Properties","148#1441372");
C=B.fN("Java Type Reflection","148#1441477");
C=B.fN("Type System Class","148#1465566");
B=A.fN("Compound Types","149");
B=A.fN("Type Loaders","150");
A=P.fN("Running Local Shell Commands","151");
B=A.fN("Running Command Line Tools from Gosu","151#2186018");
A=P.fN("Checksums","152");
B=A.fN("Overview of Checksums","153");
B=A.fN("Creating Fingerprints","153#1442951");
C=B.fN("How to Output Data Inside a Fingerprint","153#1443786");
B=A.fN("Extending Fingerprints","153#1442456");
A=P.fN("Concurrency","154");
B=A.fN("Overview of Thread Safety and Concurrency","155");
B=A.fN("Gosu Scoping Classes (Pre-scoped Maps)","156");
B=A.fN("Concurrent Lazy Variables","157");
B=A.fN("Concurrent Cache","158");
B=A.fN("Concurrency with Monitor Locks and Reentrant Objects","159");
A=P.fN("Properties Files","160");
B=A.fN("Reading Properties Files","160#1458192");
A=P.fN("Coding Style","161");
B=A.fN("General Coding Guidelines","162");
C=B.fN("Omit Semicolons","162#1445233");
C=B.fN("Type Declarations","162#1445238");
C=B.fN("The == and != Operator Recommendations and Warnings","162#1445388");
C=B.fN("Capitalization Conventions","162#1458561");
C=B.fN("Class Variable and Class Property Recommendations","162#1446206");
C=B.fN("Use \u2018typeis\u2019 Inference","162#1454113");
}
